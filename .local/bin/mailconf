#!/usr/bin/env lua

-- Configures isync and aerc from ~/.config/mailconf.

local cfg_base = os.getenv("XDG_CONFIG_DIR") or (os.getenv("HOME") .. "/.config")
local cfg = cfg_base .. "/mailconf"

local cfg_mbsync = os.getenv("MBSYNCRC") or (os.getenv("HOME") .. "/.mbsyncrc")
local cfg_aerc = (cfg_base or os.getenv("HOME")) .. "/aerc/accounts.conf"

local format = string.format
local accs = {}

local accname = ""
local acc = {}

local function writefln(h, s, ...)
	return h:write(format(s.."\n", ...))
end

local function write_mbsync(h, acc)
	writefln(h, "# BEGIN %s", acc.name)

	-- IMAP information
	writefln(h, "IMAPAccount %s", acc.name)
	writefln(h, "Host %s", acc["imaps"] or acc["imap"])
	writefln(h, "User %s", acc["user"])
	writefln(h, "PassCmd %q", format(acc["passcmd"], acc.name))

	if acc["imaps"] then
		writefln(h, "SSLType IMAPS")
	end
	writefln(h, "")

	-- IMAP receiving end
	writefln(h, "IMAPStore %s-remote", acc.name)
	writefln(h, "Account %s", acc.name)
	writefln(h, "")

	-- Mailbox store (storage end)
	writefln(h, "MaildirStore %s-local", acc.name)
	writefln(h, "SubFolders Verbatim")
	writefln(h, "Path ~/mail/%s/", acc.name)
	writefln(h, "Inbox ~/mail/%s/%s", acc.name, acc["inbox"] or "Inbox")
	writefln(h, "")

	-- Channel
	writefln(h, "Channel %s", acc.name)
	writefln(h, "Far :%s-remote:", acc.name)
	writefln(h, "Near :%s-local:", acc.name)
	writefln(h, "Patterns %s", acc["folders"] or "*")
	writefln(h, "Create Both")
	writefln(h, "Expunge Both")
	writefln(h, "SyncState *")

	writefln(h, "# END %s", acc.name)
	writefln(h, "")

	-- Ensure maildir exists
	os.execute(format("mkdir -p ~/mail/%s", acc.name))
end

local function write_aerc(h, acc)
	writefln(h, "# BEGIN %s", acc.name)

	writefln(h, "[%s]", acc.name)

	writefln(h, "from = %s", format(acc.from, acc.user))
	writefln(h, "source = notmuch://~/mail/%s", acc.name)
	writefln(h, "maildir-store = ~/mail/%s", acc.name)
	writefln(h, "default = %s", acc.inbox or "Inbox")
	writefln(h, "copy-to = Sent")

	if acc.smtps then
		writefln(h, "outgoing = %s", "smtps://" .. acc.smtps)
	else
		writefln(h, "outgoing = %s", "smtp://" .. acc.smtp)
	end

	writefln(h, "outgoing-cred-cmd = %q", format(acc.passcmd, acc.name))
	
	writefln(h, "# END %s", acc.name)
	writefln(h, "")
end

local function write_notmuch(h, acc)
	writefln(h, [=[
[database]
path=%s
[user]
[new]
tags=unread;inbox;
ignore=.mbsyncstate;.uidvalidity
[search]
exclude_tags=deleted;spam;
[maildir]
synchronize_flags=true
]=], "mail/" .. acc.name)
end

-- Read configuration file
local h = io.open(cfg, "r")

for line in h:lines() do
	local k, v = line:match("^(%w+)%s+(.*)$")
	if k ~= nil then
		k = k:lower()

		if k == "account" then
			if acc.name and #acc.name > 0 then
				accs[#accs+1] = acc
			end
			acc = {}
			acc.name = v
		else
			acc[k] = v
		end
	end
end

h:close()

if acc.name and #acc.name > 0 then
	accs[#accs+1] = acc
end

-- Open configuration files

local mbfd = io.open(cfg_mbsync, "w")
local aefd = io.open(cfg_aerc, "w")

for _, v in pairs(accs) do
	os.execute("mkdir -pv \"" .. cfg_base .. "/notmuch/" .. v.name .. "\"")
	local nm = assert(io.open(cfg_base .. "/notmuch/" .. v.name .. "/config", "w"))
	write_mbsync(mbfd, v)
	write_aerc(aefd, v)
	write_notmuch(nm, v)
	nm:close()
end

mbfd:close()
aefd:close()
